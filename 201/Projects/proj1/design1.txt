# File:    design1.txt
# Author:  Nana Owusu
# Date:    10/20/17
# Section: 29
# E-mail:  onana1@umbc.edu 
# Description:
#  This is the design for a program that uses a selection of data from the 
#  CORGIS music library in order for a user to load in a database and search 
#  the database or create a playlist that is based on a songs year, artist,
#  or genre. 

# main menu options
USER_QUIT    = -1
MENU_SEARCH  = 0
MENU_CREATE  = 1

MAX_SONG_NUM = 10  # maximum number of songs in a playlist

# these constants are used to give names to the columns of the 2D list
YEAR     = 0
ARTIST   = 1
TITLE    = 2
GENRE    = 3
DURATION = 4
TEMPO    = 5

DETAIL_MIN = YEAR   # minimum value; used for getValidInput()
DETAIL_MAX = TEMPO  # maximum value

############################################################################
# make2DList() constructs a 2D list from a file that contains information
#              about songs in a music library, such as year and artist
# Input:       filename;   a string of the music library's file name
# Output:      resultList; a 2D list of that file in the format below


##################################################################
# getValidInput() gets a valid integer from the user that
#                 falls within the appropriate range; uses
#                 a prompt provided at function call
# Input:          prompt;  a string to use when asking for input
#                 minimum; a minimum integer
#                 maximum; a maximum integer
# Output:         userInput; an integer within the range


##################################################################
# displayMainMenu() prints out the main menu of the program
# Input:	    none
# Output:	    none


################################################################## 
# displayOptions() prints out a list of the six different
#  		   attributes shown for each song
# Input:	   none
# Output:	   none


##################################################################
# displayPLOptions() prints out the three different options 
#  		     for creating a playlist
# Input:	     none
# Output:	     none


##################################################################
# printSongs() prints the details of every song from a given 
#  	       2D list
# Input:       songs;	Takes in a 2D list of songs
# Output:      none


##################################################################
# colToString() converts a number to the corresponding column
#  		heading
# Input:	column;	an integer which is the index of the 
#  		column
# Output:	columnHeading; a string containing the column
#  		heading

##################################################################
# songToSting() converts a song's information into a string 
#  		of it's details
# Input:	song;	1D list that contains the details of
#  		a single song
# Output:	songString; a string containing the details 
#  		of the song

##################################################################
# search() creates a 2D list of songs that match the value 
# 	   being searched for in the selected column
# Input:   songs; a 2D list of songs
#  	   col;	  an integer between 0-5
#	   value; the value being searched for
# Output:  songSearched; a 2D list of all songs that match
# 	   the value in the selected column

##################################################################
# createPlaylist() creates a 2D list of all songs within the
# 		   type selected by the user; limits list 
#		   length using length in function call
# Input:	   songs; a 2D list of songs
# 		   choice; an integer between 1-3
#		   length; an integer between 0-10 

def main():
    # get the filename from the user
    # call the provided make2DList function to read in songs
    songs = make2DList

    # create prompt for menu choice
    # display the main menu options
    displayMainMenu()
    # priming read for getting menu choice
    getValidInput()

    # while menu choice != -1 (for QUIT)
     
	# if they want to search

	    # create prompt for column choice
	    # display the search options
	    displayOptions()
	    # get column choice from user
	    getValidInput()
	    # convert choice number to a string
	    colToString()
	    # ask for value for the choice number chose and search for it
	    search()
	    # convert each song in the list returned by search into a string
	    songToString()
	    # display list of songs found 
	    printSongs()

	    # create prompt for menu choice
    	    # display the main menu options
    	    displayMainMenu()
    	    # priming read for getting menu choice
    	    getValidInput()

	# if they want to make a playlist
	    
	    # create prompt for type of playlist choice
	    # display playlist options
	    displayPLOptions()
	    #get playlist type choice from user
	    getValidInput()
	    # convert choice number to a string
	    colToString()
	    # ask for length of the playlist
	    getValidInput()
	    # ask for the value of the playlist option chose and returns a
	      list matching the length and their choice
	    createPlaylist()
	    # turn each song from the list returned, into a string
	    songToString()
	    # print out the list of songs 
	    printSongs()

         # create prompt for menu choice
         # display the main menu options
         displayMainMenu()
         # priming read for getting menu choice
         getValidInput() 
    
    # Exit message - Thanks for using the Music Organizer
           

main()
